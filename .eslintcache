[{"C:\\Users\\Emil\\source\\repos\\test-admin\\src\\reportWebVitals.js":"1","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\App.js":"2","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\users.js":"3","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\MyUrlField.js":"4","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\posts.js":"5","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\Dashboard.js":"6","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\index.js":"7","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\MyLayout.js":"8","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\MyAppBar.js":"9","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\comments.js":"10","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\MyMenu.js":"11"},{"size":362,"mtime":1606143201965,"results":"12","hashOfConfig":"13"},{"size":1113,"mtime":1606233184563,"results":"14","hashOfConfig":"13"},{"size":3163,"mtime":1606295905027,"results":"15","hashOfConfig":"13"},{"size":603,"mtime":1606144221855,"results":"16","hashOfConfig":"13"},{"size":4545,"mtime":1606295688211,"results":"17","hashOfConfig":"13"},{"size":6152,"mtime":1606226524626,"results":"18","hashOfConfig":"13"},{"size":500,"mtime":1606230352874,"results":"19","hashOfConfig":"13"},{"size":238,"mtime":1606294538481,"results":"20","hashOfConfig":"13"},{"size":1100,"mtime":1606294584227,"results":"21","hashOfConfig":"13"},{"size":4653,"mtime":1606296033501,"results":"22","hashOfConfig":"13"},{"size":1365,"mtime":1606294495716,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lx87yl",{"filePath":"26","messages":"27","errorCount":3,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Emil\\source\\repos\\test-admin\\src\\reportWebVitals.js",[],"C:\\Users\\Emil\\source\\repos\\test-admin\\src\\App.js",["50","51","52","53","54","55"],"C:\\Users\\Emil\\source\\repos\\test-admin\\src\\users.js",[],["56","57"],"C:\\Users\\Emil\\source\\repos\\test-admin\\src\\MyUrlField.js",[],"C:\\Users\\Emil\\source\\repos\\test-admin\\src\\posts.js",["58","59"],"import * as React from \"react\";\r\nimport { useMediaQuery, makeStyles } from '@material-ui/core';\r\nimport { MenuItemLink, getResources, RichTextField, SimpleShowLayout, Show, DateInput, List, Datagrid, SimpleList, TextField, ReferenceField, ShowButton, EditButton, Filter, ReferenceInput, SelectInput, TextInput, Edit, SimpleForm, Create } from 'react-admin';\r\nimport { useSelector } from 'react-redux';\r\nimport DefaultIcon from '@material-ui/icons/ViewList';\r\n\r\nconst PostFilter = (props) => (\r\n    <Filter {...props}>\r\n        <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n        <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\r\n            <SelectInput optionText=\"name\" />\r\n        </ReferenceInput>\r\n        <SimpleForm label=\"Date\" allowEmpty>\r\n            <DateInput source=\"from date\" />\r\n            <DateInput source=\"to date\" />\r\n        </SimpleForm>\r\n    </Filter>\r\n);\r\n\r\nconst useStyles = makeStyles({\r\n    navDisplay: {\r\n        marginTop: 20,\r\n        display: 'flex',\r\n        width: '100%',\r\n        justifyContent: 'start'\r\n    },\r\n});\r\n\r\nconst Menu = ({ onMenuClick, logout }) => {\r\n    const classes = useStyles();\r\n    const open = useSelector(state => state.admin.ui.sidebarOpen);\r\n    const resources = useSelector(getResources);\r\n    return (\r\n        <div className={classes.navDisplay}>\r\n            {resources.map(resource => (\r\n                <MenuItemLink\r\n                    key={resource.name}\r\n                    to={`/${resource.name}`}\r\n                    primaryText={\r\n                        (resource.options && resource.options.label) ||\r\n                        resource.name\r\n                    }\r\n                    leftIcon={\r\n                        resource.icon ? <resource.icon /> : <DefaultIcon />\r\n                    }\r\n                    onClick={onMenuClick}\r\n                    sidebarIsOpen={open}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const PostList = (props) => {\r\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\r\n    const open = useSelector(state => state.admin.ui.sidebarOpen);\r\n    const resources = useSelector(getResources);\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <List filters={<PostFilter />} {...props}>\r\n                {isSmall ? (\r\n                    <SimpleList\r\n                        primaryText={record => record.title}\r\n                        secondaryText={record => `${record.views} views`}\r\n                        tertiaryText={record => new Date(record.published_at).toLocaleDateString()}\r\n                    />\r\n                ) : (\r\n                    <Datagrid rowClick=\"show\">\r\n                        <TextField source=\"id\" />\r\n                        <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\">\r\n                            <TextField source=\"name\" />\r\n                        </ReferenceField>\r\n                        <TextField source=\"title\" />\r\n                        <TextField source=\"body\" />\r\n                        <ShowButton />\r\n                        <EditButton />\r\n                    </Datagrid>\r\n                )}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n    \r\nconst PostTitle = ({ record }) => {\r\n        return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\r\n};\r\n\r\nexport const PostEdit = props => (\r\n    <Edit title={<PostTitle />} {...props}>\r\n        <SimpleForm>\r\n           <TextInput disabled source=\"id\" />\r\n            <ReferenceInput source=\"userId\" reference=\"users\">\r\n                <SelectInput optionText=\"name\" />\r\n            </ReferenceInput>\r\n            <TextInput source=\"title\" />\r\n            <TextInput multiline source=\"body\" />\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const PostCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n            <ReferenceInput source=\"userId\" reference=\"users\">\r\n                <SelectInput optionText=\"name\" />\r\n            </ReferenceInput>\r\n            <TextInput source=\"title\" />\r\n            <TextInput multiline source=\"body\" />\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\nexport const PostShow = (props) => (\r\n    <Show {...props}>\r\n        <SimpleShowLayout>\r\n            <TextField source=\"title\" />\r\n            <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\">\r\n                <TextField source=\"name\" />\r\n            </ReferenceField>\r\n            <RichTextField source=\"body\" />\r\n            </SimpleShowLayout>\r\n    </Show>\r\n);","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\Dashboard.js",["60"],"import React, { PureComponent } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Card, Grid} from '@material-ui/core';\r\nimport { AreaChart, CartesianGrid, XAxis, YAxis, Tooltip, Area, ComposedChart, Legend, Bar, Line, PieChart, Pie, Cell, Sector } from 'recharts';\r\n\r\nconst data = [\r\n    {\r\n      \"name\": \"Page A\",\r\n      \"uv\": 4000,\r\n      \"pv\": 2400,\r\n      \"amt\": 2400\r\n    },\r\n    {\r\n      \"name\": \"Page B\",\r\n      \"uv\": 3000,\r\n      \"pv\": 1398,\r\n      \"amt\": 2210\r\n    },\r\n    {\r\n      \"name\": \"Page C\",\r\n      \"uv\": 2000,\r\n      \"pv\": 9800,\r\n      \"amt\": 2290\r\n    },\r\n    {\r\n      \"name\": \"Page D\",\r\n      \"uv\": 2780,\r\n      \"pv\": 3908,\r\n      \"amt\": 2000\r\n    },\r\n    {\r\n      \"name\": \"Page E\",\r\n      \"uv\": 1890,\r\n      \"pv\": 4800,\r\n      \"amt\": 2181\r\n    },\r\n    {\r\n      \"name\": \"Page F\",\r\n      \"uv\": 2390,\r\n      \"pv\": 3800,\r\n      \"amt\": 2500\r\n    },\r\n    {\r\n      \"name\": \"Page G\",\r\n      \"uv\": 3490,\r\n      \"pv\": 4300,\r\n      \"amt\": 2100\r\n    }\r\n    ]\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\r\n\r\nconst renderActiveShape = (props) => {\r\n    const {\r\n      cx, cy, innerRadius, outerRadius, startAngle, endAngle,\r\n      fill, percent,\r\n    } = props;\r\n  \r\n    return (\r\n      <g>\r\n        <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>{`${(percent * 100).toFixed(2)}%`}</text>\r\n        <Sector\r\n          cx={cx}\r\n          cy={cy}\r\n          innerRadius={innerRadius - 5}\r\n          outerRadius={outerRadius+5}\r\n          startAngle={startAngle}\r\n          endAngle={endAngle}\r\n          fill={fill}\r\n        />\r\n      </g>\r\n    );\r\n  };\r\n\r\n\r\n\r\nexport default class CustomPieChart extends PureComponent {\r\n    classes = makeStyles((theme) => ({\r\n        legend: {\r\n            width: '75px',\r\n            maxHeight: '100%',\r\n        }\r\n    }));\r\n    state = {\r\n      activeIndex: 0,\r\n    };\r\n  \r\n    onPieEnter = (data, index) => {\r\n      this.setState({\r\n        activeIndex: index,\r\n      });\r\n    };\r\n\r\n\trender () {\r\n  \treturn (\r\n    \t<PieChart width={390} height={300}>\r\n            <Legend layout=\"horizontal\" align=\"right\" wrapperStyle={{display: 'inlineBlock', textAlign: 'left'}}/>\r\n            <Pie \r\n                activeIndex={this.state.activeIndex}\r\n                activeShape={renderActiveShape} \r\n                data={data} \r\n                cx={200} \r\n                cy={150} \r\n                innerRadius={60}\r\n                outerRadius={80}\r\n                dataKey=\"uv\"\r\n                fill=\"#8884d8\"\r\n                onMouseEnter={this.onPieEnter}\r\n            >\r\n                {\r\n                    data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\r\n                }\r\n            </Pie>\r\n       </PieChart>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      marginTop: 20,\r\n    },\r\n}));\r\n\r\nexport const Dashboard = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={5}>\r\n                    <Card>\r\n                        <CustomPieChart />\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={7}>\r\n                    <Card>\r\n                        <ComposedChart width={550} height={300} data={data} margin={{ top: 20, right: 10, bottom: 20, left: 10 }}>\r\n                            <XAxis dataKey=\"name\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <CartesianGrid stroke=\"#f5f5f5\" />\r\n                            <Bar dataKey=\"amt\" barSize={20} fill=\"#8884d8\" />\r\n                            <Bar dataKey=\"pv\" barSize={20} fill=\"#413ea0\" />\r\n                            <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#ff7300\" />\r\n                        </ComposedChart>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Card>\r\n                        <AreaChart width={980} height={250} data={data}\r\n                            margin={{ top: 20, right: 10, bottom: 20, left: 10 }}>\r\n                            <defs>\r\n                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                    <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\r\n                                    <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\r\n                                </linearGradient>\r\n                                <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8}/>\r\n                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0}/>\r\n                                </linearGradient>\r\n                            </defs>\r\n                            <XAxis dataKey=\"name\" />\r\n                            <YAxis />\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <Tooltip />\r\n                            <Area type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUv)\" />\r\n                            <Area type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorPv)\" />\r\n                        </AreaChart>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n{/* <PieChart width={400} height={400}>\r\n                        <Pie\r\n                            activeIndex={this.state.activeIndex}\r\n                            activeShape={renderActiveShape}\r\n                            data={data}\r\n                            cx={200}\r\n                            cy={200}\r\n                            innerRadius={60}\r\n                            outerRadius={80}\r\n                            fill=\"#8884d8\"\r\n                            dataKey=\"uv\"\r\n                            onMouseEnter={this.onPieEnter}\r\n        />\r\n                        </PieChart> */}","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\index.js",[],"C:\\Users\\Emil\\source\\repos\\test-admin\\src\\MyLayout.js",["61"],"import * as React from 'react';\r\nimport { Layout } from 'react-admin';\r\nimport MyAppBar from './MyAppBar';\r\nimport MyMenu from './MyMenu';\r\n\r\nconst MyLayout = (props) => <Layout {...props} appBar={MyAppBar} />;\r\n\r\nexport default MyLayout;","C:\\Users\\Emil\\source\\repos\\test-admin\\src\\MyAppBar.js",["62","63"],"C:\\Users\\Emil\\source\\repos\\test-admin\\src\\comments.js",[],"C:\\Users\\Emil\\source\\repos\\test-admin\\src\\MyMenu.js",[],{"ruleId":"64","severity":1,"message":"65","line":5,"column":27,"nodeType":"66","messageId":"67","endLine":5,"endColumn":38},{"ruleId":"64","severity":1,"message":"68","line":5,"column":40,"nodeType":"66","messageId":"67","endLine":5,"endColumn":51},{"ruleId":"64","severity":1,"message":"69","line":5,"column":53,"nodeType":"66","messageId":"67","endLine":5,"endColumn":64},{"ruleId":"70","severity":2,"message":"71","line":16,"column":50,"nodeType":"66","messageId":"72","endLine":16,"endColumn":58},{"ruleId":"70","severity":2,"message":"73","line":16,"column":66,"nodeType":"66","messageId":"72","endLine":16,"endColumn":74},{"ruleId":"70","severity":2,"message":"74","line":16,"column":84,"nodeType":"66","messageId":"72","endLine":16,"endColumn":94},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"64","severity":1,"message":"79","line":57,"column":11,"nodeType":"66","messageId":"67","endLine":57,"endColumn":15},{"ruleId":"64","severity":1,"message":"80","line":58,"column":11,"nodeType":"66","messageId":"67","endLine":58,"endColumn":20},{"ruleId":"81","severity":1,"message":"82","line":181,"column":1,"nodeType":"83","messageId":"84","endLine":194,"endColumn":40},{"ruleId":"64","severity":1,"message":"85","line":4,"column":8,"nodeType":"66","messageId":"67","endLine":4,"endColumn":14},{"ruleId":"64","severity":1,"message":"86","line":3,"column":8,"nodeType":"66","messageId":"67","endLine":3,"endColumn":18},{"ruleId":"64","severity":1,"message":"87","line":5,"column":28,"nodeType":"66","messageId":"67","endLine":5,"endColumn":32},"no-unused-vars","'ListGuesser' is defined but never used.","Identifier","unusedVar","'ShowGuesser' is defined but never used.","'EditGuesser' is defined but never used.","no-undef","'UserShow' is not defined.","undef","'UserEdit' is not defined.","'UserCreate' is not defined.","no-native-reassign",["88"],"no-negated-in-lhs",["89"],"'open' is assigned a value but never used.","'resources' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'MyMenu' is defined but never used.","'Typography' is defined but never used.","'Logo' is defined but never used.","no-global-assign","no-unsafe-negation"]